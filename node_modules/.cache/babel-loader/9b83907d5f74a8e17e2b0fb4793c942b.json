{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport { UPDATE_PRODUCTS, UPDATE_CATEGORIES, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from './actions';\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n    // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return { ...state,\n        cart: [...state.cart, ...action.products]\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return { ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return { ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n\n          return product;\n        })\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    default:\n      return state;\n  }\n};\nexport function useProductReducer(initialState) {\n  _s();\n\n  return useReducer(reducer, initialState);\n}\n\n_s(useProductReducer, \"skVOqNGrFQuDFh+lpttAJ2AZFeA=\");","map":{"version":3,"sources":["C:/Users/HAYLEM SAKHRAOUI/Desktop/MERNG-STACK/client/src/utils/reducers.js"],"names":["useReducer","UPDATE_PRODUCTS","UPDATE_CATEGORIES","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","reducer","state","action","type","products","categories","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","useProductReducer","initialState"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,SACEC,eADF,EAEEC,iBAFF,EAGEC,WAHF,EAIEC,oBAJF,EAKEC,gBALF,EAMEC,oBANF,EAOEC,UAPF,EAQEC,WARF,QASO,WATP;AAWE,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKX,eAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELG,QAAAA,QAAQ,EAAE,CAAC,GAAGF,MAAM,CAACE,QAAX;AAFL,OAAP;AAIF;;AACA,SAAKX,iBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELI,QAAAA,UAAU,EAAE,CAAC,GAAGH,MAAM,CAACG,UAAX;AAFP,OAAP;;AAIA,SAAKX,WAAL;AACI,aAAO,EACL,GAAGO,KADE;AAELK,QAAAA,QAAQ,EAAE,IAFL;AAGLC,QAAAA,IAAI,EAAE,CAAC,GAAGN,KAAK,CAACM,IAAV,EAAgBL,MAAM,CAACM,OAAvB;AAHD,OAAP;;AAKJ,SAAKb,oBAAL;AACI,aAAO,EACL,GAAGM,KADE;AAELM,QAAAA,IAAI,EAAE,CAAC,GAAGN,KAAK,CAACM,IAAV,EAAgB,GAAGL,MAAM,CAACE,QAA1B;AAFD,OAAP;;AAIJ,SAAKR,gBAAL;AACI,UAAIa,QAAQ,GAAGR,KAAK,CAACM,IAAN,CAAWG,MAAX,CAAkBF,OAAO,IAAI;AAC1C,eAAOA,OAAO,CAACG,GAAR,KAAgBT,MAAM,CAACS,GAA9B;AACD,OAFc,CAAf;AAIA,aAAO,EACL,GAAGV,KADE;AAELK,QAAAA,QAAQ,EAAEG,QAAQ,CAACG,MAAT,GAAkB,CAFvB;AAGLL,QAAAA,IAAI,EAAEE;AAHD,OAAP;;AAKJ,SAAKZ,oBAAL;AACI,aAAO,EACL,GAAGI,KADE;AAELK,QAAAA,QAAQ,EAAE,IAFL;AAGLC,QAAAA,IAAI,EAAEN,KAAK,CAACM,IAAN,CAAWM,GAAX,CAAeL,OAAO,IAAI;AAC9B,cAAIN,MAAM,CAACS,GAAP,KAAeH,OAAO,CAACG,GAA3B,EAAgC;AAC9BH,YAAAA,OAAO,CAACM,gBAAR,GAA2BZ,MAAM,CAACY,gBAAlC;AACD;;AACD,iBAAON,OAAP;AACD,SALK;AAHD,OAAP;;AAUJ,SAAKV,UAAL;AACI,aAAO,EACL,GAAGG,KADE;AAELK,QAAAA,QAAQ,EAAE,KAFL;AAGLC,QAAAA,IAAI,EAAE;AAHD,OAAP;;AAKJ,SAAKR,WAAL;AACI,aAAO,EACL,GAAGE,KADE;AAELK,QAAAA,QAAQ,EAAE,CAACL,KAAK,CAACK;AAFZ,OAAP;;AAIN;AACE,aAAOL,KAAP;AAzDJ;AA2DD,CA5DM;AA8DP,OAAO,SAASc,iBAAT,CAA2BC,YAA3B,EAAyC;AAAA;;AAC9C,SAAOzB,UAAU,CAACS,OAAD,EAAUgB,YAAV,CAAjB;AACD;;GAFeD,iB","sourcesContent":["import { useReducer } from 'react';\n\nimport {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from './actions';\n  \n  export const reducer = (state, action) => {\n    switch (action.type) {\n      // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n      case UPDATE_PRODUCTS:\n        return {\n          ...state,\n          products: [...action.products]\n        };\n      // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n      case UPDATE_CATEGORIES:\n        return {\n          ...state,\n          categories: [...action.categories]\n        };\n        case ADD_TO_CART:\n            return {\n              ...state,\n              cartOpen: true,\n              cart: [...state.cart, action.product]\n            };\n        case ADD_MULTIPLE_TO_CART:\n            return {\n              ...state,\n              cart: [...state.cart, ...action.products],\n            };\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n              return product._id !== action._id;\n            });\n\n            return {\n              ...state,\n              cartOpen: newState.length > 0,\n              cart: newState\n            };\n        case UPDATE_CART_QUANTITY:\n            return {\n              ...state,\n              cartOpen: true,\n              cart: state.cart.map(product => {\n                if (action._id === product._id) {\n                  product.purchaseQuantity = action.purchaseQuantity;\n                }\n                return product;\n              })\n            };\n        case CLEAR_CART:\n            return {\n              ...state,\n              cartOpen: false,\n              cart: []\n            };\n        case TOGGLE_CART:\n            return {\n              ...state,\n              cartOpen: !state.cartOpen\n            };\n      default:\n        return state;\n    }\n  };\n\n  export function useProductReducer(initialState) {\n    return useReducer(reducer, initialState);\n  }\n\n  "]},"metadata":{},"sourceType":"module"}