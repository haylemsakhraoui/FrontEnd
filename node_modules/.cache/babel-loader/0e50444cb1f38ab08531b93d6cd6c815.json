{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HAYLEM SAKHRAOUI\\\\Desktop\\\\MERNG-STACK\\\\client\\\\src\\\\components\\\\CategoryMenu\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CategoryMenu(_ref) {\n  _s();\n\n  let {} = _ref;\n  const [state, dispatch] = useStoreContext();\n  const {\n    categories\n  } = state;\n  const {\n    loading,\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES);\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Choose a Category:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), categories.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        handleClick(item._id);\n      },\n      children: item.name\n    }, item._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CategoryMenu, \"dVCQPHAWx2znearw0XIiXyA+Ei0=\", false, function () {\n  return [useStoreContext, useQuery];\n});\n\n_c = CategoryMenu;\nexport default CategoryMenu;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryMenu\");","map":{"version":3,"sources":["C:/Users/HAYLEM SAKHRAOUI/Desktop/MERNG-STACK/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","useQuery","QUERY_CATEGORIES","useStoreContext","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","idbPromise","CategoryMenu","state","dispatch","categories","loading","data","categoryData","type","forEach","category","then","handleClick","id","currentCategory","map","item","_id","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AAEA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,iBAAT,EAA4BC,uBAA5B,QAA2D,qBAA3D;AAEA,SAASC,UAAT,QAA2B,qBAA3B;;;AAEA,SAASC,YAAT,OAA0B;AAAA;;AAAA,MAAJ,EAAI;AAExB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,eAAe,EAAzC;AAEA,QAAM;AAAEO,IAAAA;AAAF,MAAiBF,KAAvB;AAEA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC;AAAjB,MAAkCZ,QAAQ,CAACC,gBAAD,CAAhD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,YAAJ,EAAkB;AAChBJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEV,iBADC;AAEPM,QAAAA,UAAU,EAAEG,YAAY,CAACH;AAFlB,OAAD,CAAR;AAIAG,MAAAA,YAAY,CAACH,UAAb,CAAwBK,OAAxB,CAAgCC,QAAQ,IAAI;AAC1CV,QAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,EAAsBU,QAAtB,CAAV;AACD,OAFD;AAGD,KARD,MAQO,IAAI,CAACL,OAAL,EAAc;AACnBL,MAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,CAAV,CAAgCW,IAAhC,CAAqCP,UAAU,IAAI;AACjDD,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAEV,iBADC;AAEPM,UAAAA,UAAU,EAAEA;AAFL,SAAD,CAAR;AAID,OALD;AAMD;AACF,GAjBQ,EAiBN,CAACG,YAAD,EAAeF,OAAf,EAAwBF,QAAxB,CAjBM,CAAT;;AAmBA,QAAMS,WAAW,GAAGC,EAAE,IAAI;AACxBV,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAET,uBADC;AAEPe,MAAAA,eAAe,EAAED;AAFV,KAAD,CAAR;AAID,GALD;;AAOA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGT,UAAU,CAACW,GAAX,CAAeC,IAAI,iBAClB;AAEE,MAAA,OAAO,EAAE,MAAM;AACbJ,QAAAA,WAAW,CAACI,IAAI,CAACC,GAAN,CAAX;AACD,OAJH;AAAA,gBAMGD,IAAI,CAACE;AANR,OACOF,IAAI,CAACC,GADZ;AAAA;AAAA;AAAA;AAAA,YADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAjDQhB,Y;UAEmBJ,e,EAIcF,Q;;;KANjCM,Y;AAmDT,eAAeA,YAAf","sourcesContent":["import React, { useEffect } from 'react';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\n\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\n\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu({}) {\n\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n"]},"metadata":{},"sourceType":"module"}